{"version":3,"sources":["components/ToDoForm.js","components/Todo.js","components/ToDoList.js","components/PomodoroSettings.js","components/Pomodoro.js","App.js","serviceWorker.js","index.js"],"names":["ToDoForm","state","text","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","Form","this","Input","fluid","input","action","icon","placeholder","onChange","Component","style","textDecoration","todo","fontSize","ToDoList","todos","completed","filter","addTodo","toggleComplete","map","changeFilter","handleDeleteTodo","visibleTodos","Container","List","incelled","verticalAlign","Item","key","Content","floated","Icon","cursor","onClick","name","Todo","Button","PomodoroSettings","modalOpen","work","breakTime","longBreak","pomodoros","handleModal","Modal","open","size","onClose","trigger","display","padding","centered","Header","content","margin","Grid","Row","columns","Column","defaultValue","Actions","color","updateSettings","React","Pomodoro","isRunning","timerID","currentTime","timeLeft","currentCycle","pomodorosDone","stopTimer","clearInterval","format","toggleTimer","setInterval","seconds","m","Math","floor","s","renderType","backgroundColor","borderRadius","marginBottom","className","paddingBottom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8151ae5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { Input, Form } from \"semantic-ui-react\";\r\n\r\nexport default class ToDoForm extends Component {\r\n  state = {\r\n    text: \"\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ text: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit({\r\n      id: shortid.generate(),\r\n      text: this.state.text,\r\n      complete: false\r\n    });\r\n    this.setState({\r\n      text: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <Input\r\n          fluid\r\n          input={this.state.text}\r\n          action={{ icon: \"plus\" }}\r\n          placeholder=\"Добавить задачу\"\r\n          onChange={this.handleChange}\r\n          value={this.state.text}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default props => (\r\n  <span\r\n    style={{\r\n      //   display: \"flex\",\r\n      //   justifyContent: \"start\",\r\n      textDecoration: props.todo.complete ? \"line-through\" : \"\",\r\n      fontSize: 16\r\n    }}\r\n  >\r\n    {props.todo.text}\r\n  </span>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport ToDoForm from \"./ToDoForm\";\r\nimport Todo from \"./Todo\";\r\nimport { List, Button, Icon, Container } from \"semantic-ui-react\";\r\n\r\nexport default class ToDoList extends Component {\r\n  state = {\r\n    todos: [{ id: 1, text: \"Пойти на курсы React в ЛАД\", completed: false }],\r\n    filter: \"all\"\r\n  };\r\n\r\n  addTodo = todo => {\r\n    this.setState({\r\n      todos: [...this.state.todos, todo]\r\n    });\r\n  };\r\n\r\n  toggleComplete = id => {\r\n    this.setState(state => ({\r\n      todos: state.todos.map(todo => {\r\n        if (id === todo.id) {\r\n          return {\r\n            ...todo,\r\n            complete: !todo.complete\r\n          };\r\n        } else {\r\n          return todo;\r\n        }\r\n      })\r\n    }));\r\n  };\r\n\r\n  changeFilter = filter => {\r\n    this.setState({\r\n      filter\r\n    });\r\n  };\r\n\r\n  handleDeleteTodo = id => {\r\n    this.setState(state => ({\r\n      todos: state.todos.filter(todo => todo.id !== id)\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let visibleTodos = [];\r\n    switch (this.state.filter) {\r\n      case \"all\":\r\n        visibleTodos = this.state.todos;\r\n        break;\r\n      case \"active\":\r\n        visibleTodos = this.state.todos.filter(todo => !todo.complete);\r\n        break;\r\n      case \"completed\":\r\n        visibleTodos = this.state.todos.filter(todo => todo.complete);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return (\r\n      <>\r\n        <Container>\r\n          <ToDoForm onSubmit={this.addTodo} />\r\n          <List incelled verticalAlign=\"middle\">\r\n            {visibleTodos.map(todo => (\r\n              <List.Item key={todo.id}>\r\n                <List.Content floated=\"left\">\r\n                  <Icon\r\n                    style={{ cursor: \"Pointer\" }}\r\n                    onClick={() => this.toggleComplete(todo.id)}\r\n                    name={todo.complete ? \"check circle\" : \"circle outline\"}\r\n                  />\r\n                  <Todo todo={todo} />\r\n                </List.Content>\r\n                <List.Content floated=\"right\">\r\n                  <Button icon onClick={() => this.handleDeleteTodo(todo.id)}>\r\n                    <Icon name=\"trash alternate\" />\r\n                  </Button>\r\n                </List.Content>\r\n              </List.Item>\r\n            ))}\r\n          </List>\r\n          <div>\r\n            <Button onClick={() => this.changeFilter(\"all\")}>Все</Button>\r\n            <Button onClick={() => this.changeFilter(\"active\")}>\r\n              Активные\r\n            </Button>\r\n            <Button onClick={() => this.changeFilter(\"completed\")}>\r\n              Завершенные\r\n            </Button>\r\n          </div>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Modal, Icon, Form, Grid, Button } from \"semantic-ui-react\";\r\n\r\nclass PomodoroSettings extends React.Component {\r\n  state = {\r\n    modalOpen: false,\r\n    work: 25,\r\n    breakTime: 5,\r\n    longBreak: 30,\r\n    pomodoros: 4\r\n  };\r\n\r\n  handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n  handleModal = () => {\r\n    this.setState({ modalOpen: !this.state.modalOpen });\r\n  };\r\n\r\n  //TODO сделать валидацию для формы\r\n  render() {\r\n    const { work, breakTime, longBreak, pomodoros } = this.state;\r\n    return (\r\n      <Modal\r\n        open={this.state.modalOpen}\r\n        size=\"tiny\"\r\n        onClose={this.handleModal}\r\n        trigger={\r\n          <Icon\r\n            name=\"cog\"\r\n            size=\"big\"\r\n            onClick={this.handleModal}\r\n            style={{\r\n              display: \"flex\",\r\n              cursor: \"pointer\",\r\n              padding: \"10px 0 0 10px\"\r\n            }}\r\n          />\r\n        }\r\n        centered={false}\r\n      >\r\n        <Modal.Header content=\"Настройки таймера\" />\r\n        <Modal.Content>\r\n          <Form\r\n            style={{ margin: \"10px\", fontSize: 16 }}\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            <Grid>\r\n              <Grid.Row columns={2}>\r\n                <Grid.Column verticalAlign=\"middle\">\r\n                  <label>Продожительность помидора: </label>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Form.Input\r\n                    name=\"work\"\r\n                    defaultValue={work}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row columns={2}>\r\n                <Grid.Column verticalAlign=\"middle\">\r\n                  <label>Продожительность короткого перерыва: </label>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Form.Input\r\n                    name=\"breakTime\"\r\n                    defaultValue={breakTime}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row columns={2}>\r\n                <Grid.Column verticalAlign=\"middle\">\r\n                  <label>Продожительность длинного перерыва: </label>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Form.Input\r\n                    name=\"longBreak\"\r\n                    defaultValue={longBreak}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row columns={2}>\r\n                <Grid.Column verticalAlign=\"middle\">\r\n                  <label>Помидоров до длинного перерыва (шт): </label>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Form.Input\r\n                    name=\"pomodoros\"\r\n                    defaultValue={pomodoros}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Form>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button content=\"отмена\" onClick={this.handleModal} />\r\n          <Button\r\n            color=\"green\"\r\n            content=\"Сохранить\"\r\n            onClick={() => {\r\n              this.props.updateSettings(work, breakTime, longBreak, pomodoros);\r\n              this.handleModal();\r\n            }}\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PomodoroSettings;\r\n","import React from \"react\";\r\nimport { Container, Button } from \"semantic-ui-react\";\r\nimport PomodoroSettings from \"./PomodoroSettings\";\r\nimport \"./Pomodoro.css\";\r\n\r\nexport default class Pomodoro extends React.Component {\r\n  state = {\r\n    isRunning: false,\r\n    timerID: null,\r\n    currentTime: \"25:00\",\r\n    timeLeft: 1500,\r\n    work: 25,\r\n    breakTime: 5,\r\n    longBreak: 30,\r\n    currentCycle: \"work\",\r\n    pomodoros: 4,\r\n    pomodorosDone: 0\r\n  };\r\n\r\n  stopTimer = () => {\r\n    clearInterval(this.state.timerID);\r\n    this.setState({\r\n      isRunning: false,\r\n      currentCycle: \"work\",\r\n      pomodorosDone: 0,\r\n      currentTime: this.format(this.state.work * 60)\r\n    });\r\n  };\r\n\r\n  //здесь вся логика помидорного таймера\r\n  toggleTimer = () => {\r\n    if (this.state.isRunning === false) {\r\n      this.setState({ isRunning: true });\r\n      let timerID = setInterval(() => {\r\n        if (this.state.timeLeft === 0) {\r\n          if (this.state.pomodorosDone === this.state.pomodoros) {\r\n            this.setState({\r\n              currentCycle: \"longBreak\",\r\n              timeLeft: this.state.longBreak * 60,\r\n              currentTime: this.format(this.state.timeLeft),\r\n              pomodorosDone: 0\r\n            });\r\n          } else if (this.state.currentCycle === \"work\") {\r\n            this.setState({\r\n              currentCycle: \"break\",\r\n              timeLeft: this.state.breakTime * 60,\r\n              currentTime: this.format(this.state.timeLeft)\r\n            });\r\n          } else {\r\n            this.setState({\r\n              currentCycle: \"work\",\r\n              timeLeft: this.state.work * 60,\r\n              currentTime: this.format(this.state.timeLeft),\r\n              pomodorosDone: this.state.pomodorosDone + 1\r\n            });\r\n          }\r\n        }\r\n        this.setState({ timeLeft: this.state.timeLeft - 1, timerID });\r\n        this.setState({ currentTime: this.format(this.state.timeLeft) });\r\n      }, 1000);\r\n    } else {\r\n      this.setState({ isRunning: false });\r\n      clearInterval(this.state.timerID);\r\n    }\r\n  };\r\n\r\n  format = seconds => {\r\n    let m = Math.floor((seconds % 3600) / 60);\r\n    let s = Math.floor((seconds % 3600) % 60);\r\n    let timeFormated = (m < 10 ? \"0\" : \"\") + m + \":\" + (s < 10 ? \"0\" : \"\") + s;\r\n    return timeFormated;\r\n  };\r\n\r\n  updateSettings = (work, breakTime, longBreak, pomodoros) => {\r\n    this.setState({\r\n      work,\r\n      breakTime,\r\n      longBreak,\r\n      pomodoros,\r\n      currentCycle: \"work\",\r\n      pomodorosDone: 1,\r\n      timeLeft: work * 60,\r\n      currentTime: this.format(work * 60)\r\n    });\r\n  };\r\n\r\n  renderType = () => {\r\n    switch (this.state.currentCycle) {\r\n      case \"work\":\r\n        return \"Время работать\";\r\n      case \"break\":\r\n        return \"Короткий перерыв\";\r\n      case \"longBreak\":\r\n        return \"Длинный перерыв\";\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container\r\n        style={{\r\n          backgroundColor:\r\n            this.state.currentCycle === \"work\" ? \"#ff6347\" : \"#90ee90\",\r\n          borderRadius: \"10px\",\r\n          marginBottom: \"10px\"\r\n        }}\r\n      >\r\n        <PomodoroSettings updateSettings={this.updateSettings} />\r\n        <div style={{ fontSize: 36 }}>{this.renderType()}</div>\r\n        <div className=\"timer\">{this.state.currentTime}</div>\r\n        <div className=\"control-buttons\">\r\n          <Button onClick={() => this.toggleTimer()}>\r\n            {!this.state.isRunning ? \"Старт\" : \"Пауза\"}{\" \"}\r\n          </Button>\r\n          <Button onClick={() => this.stopTimer()}>Сброс</Button>\r\n        </div>\r\n        <div style={{ paddingBottom: \"15px\", fontSize: 18 }}>\r\n          Помидоров до длинного перерыва:{\" \"}\r\n          {this.state.pomodoros - this.state.pomodorosDone}\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ToDoList from \"./components/ToDoList\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport Pomodoro from \"./components/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pomodoro />\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}